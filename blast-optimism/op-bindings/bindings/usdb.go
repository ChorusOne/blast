// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// USDBMetaData contains all meta data concerning the USDB contract.
var USDBMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotBridge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimToSameAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"name\":\"DistributeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReporter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotClaimableAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumYieldMode\",\"name\":\"yieldMode\",\"type\":\"uint8\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOTE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumYieldMode\",\"name\":\"yieldMode\",\"type\":\"uint8\"}],\"name\":\"configure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"internalType\":\"enumYieldMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6102206040523480156200001257600080fd5b506040516200286d3803806200286d83398101604081905262000035916200043a565b604080518082018252600c81526b149958985cda5b99c81554d160a21b60208083019182528351808501855260048152632aa9a22160e11b8183015284518086019095526001808652603160f81b9286019283526001600160a01b038816608052845190932085519092206101008390526101208190524660c05292946000948594909360129285928392907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620001328184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b60a0523060e052610140525050505060ff9190911661016052505050610180929092526101a0526101c0526001600160a01b038281166102005281166101e0526200017c62000184565b5050620005e2565b600054610100900460ff1615808015620001a55750600054600160ff909116105b80620001d55750620001c2306200030d60201b62000f931760201c565b158015620001d5575060005460ff166001145b6200023e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000262576000805461ff0019166101001790555b620002b46040518060400160405280600c81526020016b149958985cda5b99c81554d160a21b815250604051806040016040528060048152602001632aa9a22160e11b8152506200031c60201b60201c565b620002c36305f5e1006200039a565b80156200030a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b03163b151590565b600054610100900460ff16620003785760405162461bcd60e51b815260206004820152602b60248201526000805160206200284d83398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000235565b603562000386838262000516565b50603662000395828262000516565b505050565b600054610100900460ff16620003f65760405162461bcd60e51b815260206004820152602b60248201526000805160206200284d83398151915260448201526a6e697469616c697a696e6760a81b606482015260840162000235565b60015415620004185760405163131cb46d60e21b815260040160405180910390fd5b600155565b80516001600160a01b03811681146200043557600080fd5b919050565b600080604083850312156200044e57600080fd5b62000459836200041d565b915062000469602084016200041d565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200049d57607f821691505b602082108103620004be57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039557600081815260208120601f850160051c81016020861015620004ed5750805b601f850160051c820191505b818110156200050e57828155600101620004f9565b505050505050565b81516001600160401b0381111562000532576200053262000472565b6200054a8162000543845462000488565b84620004c4565b602080601f831160018114620005825760008415620005695750858301515b600019600386901b1c1916600185901b1785556200050e565b600085815260208120601f198616915b82811015620005b35788860151825594840194600190910190840162000592565b5085821015620005d25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516121ab620006a2600039600081816104c6015281816104ef015281816106a70152610b0101526000818161022d015261044b01526000610807015260006107de015260006107b5015260006102fb015260006113b601526000611405015260006113e001526000611339015260006113630152600061138d015260008181610387015261085b01526121ab6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637ae556b51161011a578063aad3ec96116100ad578063dd62ed3e1161007c578063dd62ed3e1461046f578063e12f3a61146104a8578063e20ccec3146104bb578063e78cea92146104c4578063ee9a31a2146104ea57600080fd5b8063aad3ec9614610403578063c44b11f714610416578063d505accf14610436578063d6c0b2c41461044957600080fd5b806395d89b41116100e957806395d89b41146103cc5780639dc29fac146103d4578063a035b1fe146103e7578063a9059cbb146103f057600080fd5b80637ae556b5146103825780637ecebe00146103a95780638129fc1c146103bc57806387269729146103c457600080fd5b806330adf81f116101925780634291cd11116101615780634291cd111461034c57806354fd4d50146103545780635b9af12b1461035c57806370a082311461036f57600080fd5b806330adf81f146102cf578063313ce567146102f65780633644e5151461032f57806340c10f191461033757600080fd5b8063095ea7b3116101ce578063095ea7b31461028e57806318160ddd146102a15780631a33757d146102a957806323b872dd146102bc57600080fd5b806301ffc9a714610200578063033964be1461022857806306661abd1461026757806306fdde0314610279575b600080fd5b61021361020e366004611c95565b610511565b60405190151581526020015b60405180910390f35b61024f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161021f565b6038545b60405190815260200161021f565b61028161054f565b60405161021f9190611ceb565b61021361029c366004611d3a565b6105dd565b61026b6105f5565b61026b6102b7366004611d64565b61061f565b6102136102ca366004611d85565b61067b565b61026b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b61031d7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161021f565b61026b610693565b61034a610345366004611d3a565b61069d565b005b61034a610773565b6102816107ae565b61034a61036a366004611dc1565b610851565b61026b61037d366004611dda565b6108d9565b61024f7f000000000000000000000000000000000000000000000000000000000000000081565b61026b6103b7366004611dda565b61096c565b61034a61098a565b60015461026b565b610281610aea565b61034a6103e2366004611d3a565b610af7565b61026b60015481565b6102136103fe366004611d3a565b610bfc565b61026b610411366004611d3a565b610c12565b610429610424366004611dda565b610d9a565b60405161021f9190611e0b565b61034a610444366004611e33565b610db8565b7f000000000000000000000000000000000000000000000000000000000000000061024f565b61026b61047d366004611ea6565b6001600160a01b039182166000908152603d6020908152604080832093909416825291909152205490565b61026b6104b6366004611dda565b610f1c565b61026b60025481565b7f000000000000000000000000000000000000000000000000000000000000000061024f565b61024f7f000000000000000000000000000000000000000000000000000000000000000081565b60006301ffc9a760e01b63ec4fc8e360e01b6001600160e01b0319841682148061054757506001600160e01b0319848116908216145b949350505050565b6035805461055c90611ed0565b80601f016020809104026020016040519081016040528092919081815260200182805461058890611ed0565b80156105d55780601f106105aa576101008083540402835291602001916105d5565b820191906000526020600020905b8154815290600101906020018083116105b857829003601f168201915b505050505081565b6000336105eb818585610fa2565b5060019392505050565b6000603b5460385461060660015490565b6106109190611f1a565b61061a9190611f39565b905090565b600061062b3383611051565b336001600160a01b03167fcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36836040516106649190611e0b565b60405180910390a2610675336108d9565b92915050565b600061068884338461113c565b6105eb84848461119f565b600061061a61132c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661111061111160901b011933016001600160a01b0316146106fb5760405163ea0e1ccb60e01b815260040160405180910390fd5b6001600160a01b03821661072257604051633a954ecd60e21b815260040160405180910390fd5b61072c8282611453565b816001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405161076791815260200190565b60405180910390a25050565b61077b6114c3565b6107ac576038546002546040516307b4790760e11b8152600481019290925260248201526044015b60405180910390fd5b565b60606107d97f000000000000000000000000000000000000000000000000000000000000000061155d565b6108027f000000000000000000000000000000000000000000000000000000000000000061155d565b61082b7f000000000000000000000000000000000000000000000000000000000000000061155d565b60405160200161083d93929190611f51565b604051602081830303815290604052905090565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661111061111160901b011933016001600160a01b0316146108af57604051631d73770560e11b815260040160405180910390fd5b80156108cd5780600260008282546108c79190611f39565b90915550505b6108d56114c3565b5050565b6001600160a01b0381166000908152603c602052604081205460ff168181600281111561090857610908611df5565b0361094a5761094361091960015490565b6001600160a01b03851660009081526037602090815260408083205460399092529091205461165e565b9150610966565b6001600160a01b0383166000908152603a602052604090205491505b50919050565b6001600160a01b038116600090815260336020526040812054610675565b600054610100900460ff16158080156109aa5750600054600160ff909116105b806109c45750303b1580156109c4575060005460ff166001145b610a275760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107a3565b6000805460ff191660011790558015610a4a576000805461ff0019166101001790555b610a946040518060400160405280600c81526020016b149958985cda5b99c81554d160a21b815250604051806040016040528060048152602001632aa9a22160e11b815250611675565b610aa16305f5e1006116ba565b8015610ae7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6036805461055c90611ed0565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661111061111160901b011933016001600160a01b031614610b555760405163ea0e1ccb60e01b815260040160405180910390fd5b6001600160a01b038216610b7c57604051630b07e54560e11b815260040160405180910390fd5b6000610b87836108d9565b905080821115610baa57604051631e9acf1760e31b815260040160405180910390fd5b610bb48383611707565b826001600160a01b03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca583604051610bef91815260200190565b60405180910390a2505050565b6000610c0933848461119f565b50600192915050565b6000336001600160a01b0384168103610c3e57604051637520beed60e01b815260040160405180910390fd5b6002610c4982610d9a565b6002811115610c5a57610c5a611df5565b14610c785760405163ebf953c760e01b815260040160405180910390fd5b6000610c8360015490565b6001600160a01b03831660009081526037602090815260408083205460399092528220549293509091610cb791849161165e565b6001600160a01b0384166000908152603a602052604081205491925090610cde9083611fab565b905080861115610d0157604051631e9acf1760e31b815260040160405180910390fd5b600080610d1785610d128a87611fab565b61177d565b91509150610d258989611453565b6001600160a01b0386166000908152603a6020526040902054610d4d908790849084906117af565b6040518881526001600160a01b038a169033907f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd9870689060200160405180910390a35095979650505050505050565b6001600160a01b03166000908152603c602052604090205460ff1690565b83421115610e085760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016107a3565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610e378c61184b565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610e9282611871565b90506000610ea2828787876118bf565b9050896001600160a01b0316816001600160a01b031614610f055760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016107a3565b610f108a8a8a610fa2565b50505050505050505050565b60006002610f2983610d9a565b6002811115610f3a57610f3a611df5565b14610f585760405163ebf953c760e01b815260040160405180910390fd5b6000610f6661091960015490565b6001600160a01b0384166000908152603a6020526040902054909150610f8c9082611fab565b9392505050565b6001600160a01b03163b151590565b6001600160a01b038316610fc95760405163eb3b083560e01b815260040160405180910390fd5b6001600160a01b038216610ff05760405163076e33c360e31b815260040160405180910390fd5b6001600160a01b038381166000818152603d602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061105c836108d9565b9050600061106984610d9a565b6001600160a01b0385166000908152603c602052604090208054919250849160ff191660018360028111156110a0576110a0611df5565b02179055506001600160a01b0384166000908152603a60205260409020546110d385846110cc60015490565b60016118e7565b60018260028111156110e7576110e7611df5565b036111045780603b60008282546110fe9190611fab565b90915550505b600184600281111561111857611118611df5565b036111355782603b600082825461112f9190611f39565b90915550505b5050505050565b6001600160a01b038381166000908152603d60209081526040808320938616835292905220546000198114611199578082111561118c576040516313be252b60e01b815260040160405180910390fd5b6111998484848403610fa2565b50505050565b6001600160a01b0383166111c657604051630b07e54560e11b815260040160405180910390fd5b6001600160a01b0382166111ed57604051633a954ecd60e21b815260040160405180910390fd5b60006111f860015490565b90506000611205856108d9565b90508083111561122857604051631e9acf1760e31b815260040160405180910390fd5b6000611233856108d9565b905061124b866112438685611fab565b8560006118e7565b611259856112438684611f39565b600061126487610d9a565b9050600181600281111561127a5761127a611df5565b036112975784603b60008282546112919190611fab565b90915550505b60006112a287610d9a565b905060018160028111156112b8576112b8611df5565b036112d55785603b60008282546112cf9190611f39565b90915550505b866001600160a01b0316886001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8860405161131a91815260200190565b60405180910390a35050505050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561138557507f000000000000000000000000000000000000000000000000000000000000000046145b156113af57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008161145f846108d9565b6114699190611f39565b9050611480838261147960015490565b60006118e7565b600061148b84610d9a565b905060018160028111156114a1576114a1611df5565b036111995782603b60008282546114b89190611f39565b909155505050505050565b60006114ce60385490565b60025410806114dd5750603854155b156114e85750600090565b6038546002546114f89190611fd8565b600160008282546115099190611f39565b909155505060385460025461151e9190611fec565b6002556001546040519081527f270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b79060200160405180910390a150600190565b6060816000036115845750506040805180820190915260018152600360fc1b602082015290565b8160005b81156115ae578061159881612000565b91506115a79050600a83611fd8565b9150611588565b60008167ffffffffffffffff8111156115c9576115c9612019565b6040519080825280601f01601f1916602001820160405280156115f3576020820181803683370190505b5090505b841561054757611608600183611fab565b9150611615600a86611fec565b611620906030611f39565b60f81b8183815181106116355761163561202f565b60200101906001600160f81b031916908160001a905350611657600a86611fd8565b94506115f7565b60008161166b8486611f1a565b6105479190611f39565b600054610100900460ff1661169c5760405162461bcd60e51b81526004016107a390612045565b60356116a883826120de565b5060366116b582826120de565b505050565b600054610100900460ff166116e15760405162461bcd60e51b81526004016107a390612045565b600154156117025760405163131cb46d60e21b815260040160405180910390fd5b600155565b6000611712836108d9565b90508082111561173557604051631e9acf1760e31b815260040160405180910390fd5b6117458383830361147960015490565b600061175084610d9a565b9050600181600281111561176657611766611df5565b036111995782603b60008282546114b89190611fab565b6000808360000361178f5750816117a8565b6117998484611fd8565b91506117a58484611fec565b90505b9250929050565b6001600160a01b0384166000908152603760205260409020546038546117d6908590611f39565b6117e09190611fab565b6038556001600160a01b038416600090815260396020526040902054603b5461180a908490611f39565b6118149190611fab565b603b556001600160a01b039093166000908152603760209081526040808320949094556039815283822092909255603a9091522055565b6001600160a01b0381166000908152603360205260409020805460018101825590610966565b600061067561187e61132c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006118d0878787876119f2565b915091506118dd81611adf565b5095945050505050565b6000806000806118f688610d9a565b9050600081600281111561190c5761190c611df5565b036119255761191b868861177d565b90945092506119dc565b600181600281111561193957611939611df5565b03611946578691506119dc565b600281600281111561195a5761195a611df5565b036119dc5786915081856119cb576001600160a01b03891660009081526037602090815260408083205460399092529091205461199891899161165e565b6001600160a01b038a166000908152603a60205260409020549091506119be8983611f39565b6119c89190611fab565b90505b6119d5878261177d565b9095509350505b6119e8888585856117af565b5050505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611a295750600090506003611ad6565b8460ff16601b14158015611a4157508460ff16601c14155b15611a525750600090506004611ad6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611aa6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611acf57600060019250925050611ad6565b9150600090505b94509492505050565b6000816004811115611af357611af3611df5565b03611afb5750565b6001816004811115611b0f57611b0f611df5565b03611b5c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107a3565b6002816004811115611b7057611b70611df5565b03611bbd5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107a3565b6003816004811115611bd157611bd1611df5565b03611c295760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016107a3565b6004816004811115611c3d57611c3d611df5565b03610ae75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016107a3565b600060208284031215611ca757600080fd5b81356001600160e01b031981168114610f8c57600080fd5b60005b83811015611cda578181015183820152602001611cc2565b838111156111995750506000910152565b6020815260008251806020840152611d0a816040850160208701611cbf565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611d3557600080fd5b919050565b60008060408385031215611d4d57600080fd5b611d5683611d1e565b946020939093013593505050565b600060208284031215611d7657600080fd5b813560038110610f8c57600080fd5b600080600060608486031215611d9a57600080fd5b611da384611d1e565b9250611db160208501611d1e565b9150604084013590509250925092565b600060208284031215611dd357600080fd5b5035919050565b600060208284031215611dec57600080fd5b610f8c82611d1e565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611e2d57634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600080600060e0888a031215611e4e57600080fd5b611e5788611d1e565b9650611e6560208901611d1e565b95506040880135945060608801359350608088013560ff81168114611e8957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611eb957600080fd5b611ec283611d1e565b91506117a560208401611d1e565b600181811c90821680611ee457607f821691505b60208210810361096657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611f3457611f34611f04565b500290565b60008219821115611f4c57611f4c611f04565b500190565b60008451611f63818460208901611cbf565b8083019050601760f91b8082528551611f83816001850160208a01611cbf565b60019201918201528351611f9e816002840160208801611cbf565b0160020195945050505050565b600082821015611fbd57611fbd611f04565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611fe757611fe7611fc2565b500490565b600082611ffb57611ffb611fc2565b500690565b60006001820161201257612012611f04565b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b601f8211156116b557600081815260208120601f850160051c810160208610156120b75750805b601f850160051c820191505b818110156120d6578281556001016120c3565b505050505050565b815167ffffffffffffffff8111156120f8576120f8612019565b61210c816121068454611ed0565b84612090565b602080601f83116001811461214157600084156121295750858301515b600019600386901b1c1916600185901b1785556120d6565b600085815260208120601f198616915b8281101561217057888601518255948401946001909101908401612151565b508582101561218e5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea164736f6c634300080f000a496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
}

// USDBABI is the input ABI used to generate the binding from.
// Deprecated: Use USDBMetaData.ABI instead.
var USDBABI = USDBMetaData.ABI

// USDBBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use USDBMetaData.Bin instead.
var USDBBin = USDBMetaData.Bin

// DeployUSDB deploys a new Ethereum contract, binding an instance of USDB to it.
func DeployUSDB(auth *bind.TransactOpts, backend bind.ContractBackend, _bridge common.Address, _remoteToken common.Address) (common.Address, *types.Transaction, *USDB, error) {
	parsed, err := USDBMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(USDBBin), backend, _bridge, _remoteToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &USDB{USDBCaller: USDBCaller{contract: contract}, USDBTransactor: USDBTransactor{contract: contract}, USDBFilterer: USDBFilterer{contract: contract}}, nil
}

// USDB is an auto generated Go binding around an Ethereum contract.
type USDB struct {
	USDBCaller     // Read-only binding to the contract
	USDBTransactor // Write-only binding to the contract
	USDBFilterer   // Log filterer for contract events
}

// USDBCaller is an auto generated read-only Go binding around an Ethereum contract.
type USDBCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// USDBTransactor is an auto generated write-only Go binding around an Ethereum contract.
type USDBTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// USDBFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type USDBFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// USDBSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type USDBSession struct {
	Contract     *USDB             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// USDBCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type USDBCallerSession struct {
	Contract *USDBCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// USDBTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type USDBTransactorSession struct {
	Contract     *USDBTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// USDBRaw is an auto generated low-level Go binding around an Ethereum contract.
type USDBRaw struct {
	Contract *USDB // Generic contract binding to access the raw methods on
}

// USDBCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type USDBCallerRaw struct {
	Contract *USDBCaller // Generic read-only contract binding to access the raw methods on
}

// USDBTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type USDBTransactorRaw struct {
	Contract *USDBTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUSDB creates a new instance of USDB, bound to a specific deployed contract.
func NewUSDB(address common.Address, backend bind.ContractBackend) (*USDB, error) {
	contract, err := bindUSDB(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &USDB{USDBCaller: USDBCaller{contract: contract}, USDBTransactor: USDBTransactor{contract: contract}, USDBFilterer: USDBFilterer{contract: contract}}, nil
}

// NewUSDBCaller creates a new read-only instance of USDB, bound to a specific deployed contract.
func NewUSDBCaller(address common.Address, caller bind.ContractCaller) (*USDBCaller, error) {
	contract, err := bindUSDB(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &USDBCaller{contract: contract}, nil
}

// NewUSDBTransactor creates a new write-only instance of USDB, bound to a specific deployed contract.
func NewUSDBTransactor(address common.Address, transactor bind.ContractTransactor) (*USDBTransactor, error) {
	contract, err := bindUSDB(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &USDBTransactor{contract: contract}, nil
}

// NewUSDBFilterer creates a new log filterer instance of USDB, bound to a specific deployed contract.
func NewUSDBFilterer(address common.Address, filterer bind.ContractFilterer) (*USDBFilterer, error) {
	contract, err := bindUSDB(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &USDBFilterer{contract: contract}, nil
}

// bindUSDB binds a generic wrapper to an already deployed contract.
func bindUSDB(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := USDBMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_USDB *USDBRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _USDB.Contract.USDBCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_USDB *USDBRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _USDB.Contract.USDBTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_USDB *USDBRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _USDB.Contract.USDBTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_USDB *USDBCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _USDB.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_USDB *USDBTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _USDB.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_USDB *USDBTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _USDB.Contract.contract.Transact(opts, method, params...)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_USDB *USDBCaller) BRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_USDB *USDBSession) BRIDGE() (common.Address, error) {
	return _USDB.Contract.BRIDGE(&_USDB.CallOpts)
}

// BRIDGE is a free data retrieval call binding the contract method 0xee9a31a2.
//
// Solidity: function BRIDGE() view returns(address)
func (_USDB *USDBCallerSession) BRIDGE() (common.Address, error) {
	return _USDB.Contract.BRIDGE(&_USDB.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_USDB *USDBCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_USDB *USDBSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _USDB.Contract.DOMAINSEPARATOR(&_USDB.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_USDB *USDBCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _USDB.Contract.DOMAINSEPARATOR(&_USDB.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_USDB *USDBCaller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "PERMIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_USDB *USDBSession) PERMITTYPEHASH() ([32]byte, error) {
	return _USDB.Contract.PERMITTYPEHASH(&_USDB.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_USDB *USDBCallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _USDB.Contract.PERMITTYPEHASH(&_USDB.CallOpts)
}

// REMOTETOKEN is a free data retrieval call binding the contract method 0x033964be.
//
// Solidity: function REMOTE_TOKEN() view returns(address)
func (_USDB *USDBCaller) REMOTETOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "REMOTE_TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REMOTETOKEN is a free data retrieval call binding the contract method 0x033964be.
//
// Solidity: function REMOTE_TOKEN() view returns(address)
func (_USDB *USDBSession) REMOTETOKEN() (common.Address, error) {
	return _USDB.Contract.REMOTETOKEN(&_USDB.CallOpts)
}

// REMOTETOKEN is a free data retrieval call binding the contract method 0x033964be.
//
// Solidity: function REMOTE_TOKEN() view returns(address)
func (_USDB *USDBCallerSession) REMOTETOKEN() (common.Address, error) {
	return _USDB.Contract.REMOTETOKEN(&_USDB.CallOpts)
}

// REPORTER is a free data retrieval call binding the contract method 0x7ae556b5.
//
// Solidity: function REPORTER() view returns(address)
func (_USDB *USDBCaller) REPORTER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "REPORTER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REPORTER is a free data retrieval call binding the contract method 0x7ae556b5.
//
// Solidity: function REPORTER() view returns(address)
func (_USDB *USDBSession) REPORTER() (common.Address, error) {
	return _USDB.Contract.REPORTER(&_USDB.CallOpts)
}

// REPORTER is a free data retrieval call binding the contract method 0x7ae556b5.
//
// Solidity: function REPORTER() view returns(address)
func (_USDB *USDBCallerSession) REPORTER() (common.Address, error) {
	return _USDB.Contract.REPORTER(&_USDB.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_USDB *USDBCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_USDB *USDBSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _USDB.Contract.Allowance(&_USDB.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_USDB *USDBCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _USDB.Contract.Allowance(&_USDB.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 value)
func (_USDB *USDBCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 value)
func (_USDB *USDBSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _USDB.Contract.BalanceOf(&_USDB.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 value)
func (_USDB *USDBCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _USDB.Contract.BalanceOf(&_USDB.CallOpts, account)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_USDB *USDBCaller) Bridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "bridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_USDB *USDBSession) Bridge() (common.Address, error) {
	return _USDB.Contract.Bridge(&_USDB.CallOpts)
}

// Bridge is a free data retrieval call binding the contract method 0xe78cea92.
//
// Solidity: function bridge() view returns(address)
func (_USDB *USDBCallerSession) Bridge() (common.Address, error) {
	return _USDB.Contract.Bridge(&_USDB.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_USDB *USDBCaller) Count(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "count")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_USDB *USDBSession) Count() (*big.Int, error) {
	return _USDB.Contract.Count(&_USDB.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_USDB *USDBCallerSession) Count() (*big.Int, error) {
	return _USDB.Contract.Count(&_USDB.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_USDB *USDBCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_USDB *USDBSession) Decimals() (uint8, error) {
	return _USDB.Contract.Decimals(&_USDB.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_USDB *USDBCallerSession) Decimals() (uint8, error) {
	return _USDB.Contract.Decimals(&_USDB.CallOpts)
}

// GetClaimableAmount is a free data retrieval call binding the contract method 0xe12f3a61.
//
// Solidity: function getClaimableAmount(address account) view returns(uint256)
func (_USDB *USDBCaller) GetClaimableAmount(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "getClaimableAmount", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetClaimableAmount is a free data retrieval call binding the contract method 0xe12f3a61.
//
// Solidity: function getClaimableAmount(address account) view returns(uint256)
func (_USDB *USDBSession) GetClaimableAmount(account common.Address) (*big.Int, error) {
	return _USDB.Contract.GetClaimableAmount(&_USDB.CallOpts, account)
}

// GetClaimableAmount is a free data retrieval call binding the contract method 0xe12f3a61.
//
// Solidity: function getClaimableAmount(address account) view returns(uint256)
func (_USDB *USDBCallerSession) GetClaimableAmount(account common.Address) (*big.Int, error) {
	return _USDB.Contract.GetClaimableAmount(&_USDB.CallOpts, account)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address account) view returns(uint8)
func (_USDB *USDBCaller) GetConfiguration(opts *bind.CallOpts, account common.Address) (uint8, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "getConfiguration", account)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address account) view returns(uint8)
func (_USDB *USDBSession) GetConfiguration(account common.Address) (uint8, error) {
	return _USDB.Contract.GetConfiguration(&_USDB.CallOpts, account)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address account) view returns(uint8)
func (_USDB *USDBCallerSession) GetConfiguration(account common.Address) (uint8, error) {
	return _USDB.Contract.GetConfiguration(&_USDB.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_USDB *USDBCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_USDB *USDBSession) Name() (string, error) {
	return _USDB.Contract.Name(&_USDB.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_USDB *USDBCallerSession) Name() (string, error) {
	return _USDB.Contract.Name(&_USDB.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_USDB *USDBCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_USDB *USDBSession) Nonces(owner common.Address) (*big.Int, error) {
	return _USDB.Contract.Nonces(&_USDB.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_USDB *USDBCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _USDB.Contract.Nonces(&_USDB.CallOpts, owner)
}

// Pending is a free data retrieval call binding the contract method 0xe20ccec3.
//
// Solidity: function pending() view returns(uint256)
func (_USDB *USDBCaller) Pending(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "pending")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Pending is a free data retrieval call binding the contract method 0xe20ccec3.
//
// Solidity: function pending() view returns(uint256)
func (_USDB *USDBSession) Pending() (*big.Int, error) {
	return _USDB.Contract.Pending(&_USDB.CallOpts)
}

// Pending is a free data retrieval call binding the contract method 0xe20ccec3.
//
// Solidity: function pending() view returns(uint256)
func (_USDB *USDBCallerSession) Pending() (*big.Int, error) {
	return _USDB.Contract.Pending(&_USDB.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_USDB *USDBCaller) Price(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "price")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_USDB *USDBSession) Price() (*big.Int, error) {
	return _USDB.Contract.Price(&_USDB.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_USDB *USDBCallerSession) Price() (*big.Int, error) {
	return _USDB.Contract.Price(&_USDB.CallOpts)
}

// RemoteToken is a free data retrieval call binding the contract method 0xd6c0b2c4.
//
// Solidity: function remoteToken() view returns(address)
func (_USDB *USDBCaller) RemoteToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "remoteToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteToken is a free data retrieval call binding the contract method 0xd6c0b2c4.
//
// Solidity: function remoteToken() view returns(address)
func (_USDB *USDBSession) RemoteToken() (common.Address, error) {
	return _USDB.Contract.RemoteToken(&_USDB.CallOpts)
}

// RemoteToken is a free data retrieval call binding the contract method 0xd6c0b2c4.
//
// Solidity: function remoteToken() view returns(address)
func (_USDB *USDBCallerSession) RemoteToken() (common.Address, error) {
	return _USDB.Contract.RemoteToken(&_USDB.CallOpts)
}

// SharePrice is a free data retrieval call binding the contract method 0x87269729.
//
// Solidity: function sharePrice() view returns(uint256)
func (_USDB *USDBCaller) SharePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "sharePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SharePrice is a free data retrieval call binding the contract method 0x87269729.
//
// Solidity: function sharePrice() view returns(uint256)
func (_USDB *USDBSession) SharePrice() (*big.Int, error) {
	return _USDB.Contract.SharePrice(&_USDB.CallOpts)
}

// SharePrice is a free data retrieval call binding the contract method 0x87269729.
//
// Solidity: function sharePrice() view returns(uint256)
func (_USDB *USDBCallerSession) SharePrice() (*big.Int, error) {
	return _USDB.Contract.SharePrice(&_USDB.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) pure returns(bool)
func (_USDB *USDBCaller) SupportsInterface(opts *bind.CallOpts, _interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "supportsInterface", _interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) pure returns(bool)
func (_USDB *USDBSession) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _USDB.Contract.SupportsInterface(&_USDB.CallOpts, _interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 _interfaceId) pure returns(bool)
func (_USDB *USDBCallerSession) SupportsInterface(_interfaceId [4]byte) (bool, error) {
	return _USDB.Contract.SupportsInterface(&_USDB.CallOpts, _interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_USDB *USDBCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_USDB *USDBSession) Symbol() (string, error) {
	return _USDB.Contract.Symbol(&_USDB.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_USDB *USDBCallerSession) Symbol() (string, error) {
	return _USDB.Contract.Symbol(&_USDB.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_USDB *USDBCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_USDB *USDBSession) TotalSupply() (*big.Int, error) {
	return _USDB.Contract.TotalSupply(&_USDB.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_USDB *USDBCallerSession) TotalSupply() (*big.Int, error) {
	return _USDB.Contract.TotalSupply(&_USDB.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_USDB *USDBCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _USDB.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_USDB *USDBSession) Version() (string, error) {
	return _USDB.Contract.Version(&_USDB.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_USDB *USDBCallerSession) Version() (string, error) {
	return _USDB.Contract.Version(&_USDB.CallOpts)
}

// AddValue is a paid mutator transaction binding the contract method 0x5b9af12b.
//
// Solidity: function addValue(uint256 value) returns()
func (_USDB *USDBTransactor) AddValue(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "addValue", value)
}

// AddValue is a paid mutator transaction binding the contract method 0x5b9af12b.
//
// Solidity: function addValue(uint256 value) returns()
func (_USDB *USDBSession) AddValue(value *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.AddValue(&_USDB.TransactOpts, value)
}

// AddValue is a paid mutator transaction binding the contract method 0x5b9af12b.
//
// Solidity: function addValue(uint256 value) returns()
func (_USDB *USDBTransactorSession) AddValue(value *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.AddValue(&_USDB.TransactOpts, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_USDB *USDBTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_USDB *USDBSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Approve(&_USDB.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_USDB *USDBTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Approve(&_USDB.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _amount) returns()
func (_USDB *USDBTransactor) Burn(opts *bind.TransactOpts, _from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "burn", _from, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _amount) returns()
func (_USDB *USDBSession) Burn(_from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Burn(&_USDB.TransactOpts, _from, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address _from, uint256 _amount) returns()
func (_USDB *USDBTransactorSession) Burn(_from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Burn(&_USDB.TransactOpts, _from, _amount)
}

// Claim is a paid mutator transaction binding the contract method 0xaad3ec96.
//
// Solidity: function claim(address recipient, uint256 amount) returns(uint256)
func (_USDB *USDBTransactor) Claim(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "claim", recipient, amount)
}

// Claim is a paid mutator transaction binding the contract method 0xaad3ec96.
//
// Solidity: function claim(address recipient, uint256 amount) returns(uint256)
func (_USDB *USDBSession) Claim(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Claim(&_USDB.TransactOpts, recipient, amount)
}

// Claim is a paid mutator transaction binding the contract method 0xaad3ec96.
//
// Solidity: function claim(address recipient, uint256 amount) returns(uint256)
func (_USDB *USDBTransactorSession) Claim(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Claim(&_USDB.TransactOpts, recipient, amount)
}

// Configure is a paid mutator transaction binding the contract method 0x1a33757d.
//
// Solidity: function configure(uint8 yieldMode) returns(uint256)
func (_USDB *USDBTransactor) Configure(opts *bind.TransactOpts, yieldMode uint8) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "configure", yieldMode)
}

// Configure is a paid mutator transaction binding the contract method 0x1a33757d.
//
// Solidity: function configure(uint8 yieldMode) returns(uint256)
func (_USDB *USDBSession) Configure(yieldMode uint8) (*types.Transaction, error) {
	return _USDB.Contract.Configure(&_USDB.TransactOpts, yieldMode)
}

// Configure is a paid mutator transaction binding the contract method 0x1a33757d.
//
// Solidity: function configure(uint8 yieldMode) returns(uint256)
func (_USDB *USDBTransactorSession) Configure(yieldMode uint8) (*types.Transaction, error) {
	return _USDB.Contract.Configure(&_USDB.TransactOpts, yieldMode)
}

// DistributePending is a paid mutator transaction binding the contract method 0x4291cd11.
//
// Solidity: function distributePending() returns()
func (_USDB *USDBTransactor) DistributePending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "distributePending")
}

// DistributePending is a paid mutator transaction binding the contract method 0x4291cd11.
//
// Solidity: function distributePending() returns()
func (_USDB *USDBSession) DistributePending() (*types.Transaction, error) {
	return _USDB.Contract.DistributePending(&_USDB.TransactOpts)
}

// DistributePending is a paid mutator transaction binding the contract method 0x4291cd11.
//
// Solidity: function distributePending() returns()
func (_USDB *USDBTransactorSession) DistributePending() (*types.Transaction, error) {
	return _USDB.Contract.DistributePending(&_USDB.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_USDB *USDBTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_USDB *USDBSession) Initialize() (*types.Transaction, error) {
	return _USDB.Contract.Initialize(&_USDB.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_USDB *USDBTransactorSession) Initialize() (*types.Transaction, error) {
	return _USDB.Contract.Initialize(&_USDB.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_USDB *USDBTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "mint", _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_USDB *USDBSession) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Mint(&_USDB.TransactOpts, _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_USDB *USDBTransactorSession) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Mint(&_USDB.TransactOpts, _to, _amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_USDB *USDBTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_USDB *USDBSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _USDB.Contract.Permit(&_USDB.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_USDB *USDBTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _USDB.Contract.Permit(&_USDB.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_USDB *USDBTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_USDB *USDBSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Transfer(&_USDB.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_USDB *USDBTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.Transfer(&_USDB.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_USDB *USDBTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_USDB *USDBSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.TransferFrom(&_USDB.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_USDB *USDBTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _USDB.Contract.TransferFrom(&_USDB.TransactOpts, from, to, amount)
}

// USDBApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the USDB contract.
type USDBApprovalIterator struct {
	Event *USDBApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBApproval represents a Approval event raised by the USDB contract.
type USDBApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_USDB *USDBFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*USDBApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _USDB.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &USDBApprovalIterator{contract: _USDB.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_USDB *USDBFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *USDBApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _USDB.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBApproval)
				if err := _USDB.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_USDB *USDBFilterer) ParseApproval(log types.Log) (*USDBApproval, error) {
	event := new(USDBApproval)
	if err := _USDB.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// USDBBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the USDB contract.
type USDBBurnIterator struct {
	Event *USDBBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBBurn represents a Burn event raised by the USDB contract.
type USDBBurn struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed account, uint256 amount)
func (_USDB *USDBFilterer) FilterBurn(opts *bind.FilterOpts, account []common.Address) (*USDBBurnIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _USDB.contract.FilterLogs(opts, "Burn", accountRule)
	if err != nil {
		return nil, err
	}
	return &USDBBurnIterator{contract: _USDB.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed account, uint256 amount)
func (_USDB *USDBFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *USDBBurn, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _USDB.contract.WatchLogs(opts, "Burn", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBBurn)
				if err := _USDB.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed account, uint256 amount)
func (_USDB *USDBFilterer) ParseBurn(log types.Log) (*USDBBurn, error) {
	event := new(USDBBurn)
	if err := _USDB.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// USDBClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the USDB contract.
type USDBClaimIterator struct {
	Event *USDBClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBClaim represents a Claim event raised by the USDB contract.
type USDBClaim struct {
	Account   common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068.
//
// Solidity: event Claim(address indexed account, address indexed recipient, uint256 amount)
func (_USDB *USDBFilterer) FilterClaim(opts *bind.FilterOpts, account []common.Address, recipient []common.Address) (*USDBClaimIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _USDB.contract.FilterLogs(opts, "Claim", accountRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &USDBClaimIterator{contract: _USDB.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068.
//
// Solidity: event Claim(address indexed account, address indexed recipient, uint256 amount)
func (_USDB *USDBFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *USDBClaim, account []common.Address, recipient []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _USDB.contract.WatchLogs(opts, "Claim", accountRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBClaim)
				if err := _USDB.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068.
//
// Solidity: event Claim(address indexed account, address indexed recipient, uint256 amount)
func (_USDB *USDBFilterer) ParseClaim(log types.Log) (*USDBClaim, error) {
	event := new(USDBClaim)
	if err := _USDB.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// USDBConfigureIterator is returned from FilterConfigure and is used to iterate over the raw logs and unpacked data for Configure events raised by the USDB contract.
type USDBConfigureIterator struct {
	Event *USDBConfigure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBConfigureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBConfigure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBConfigure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBConfigureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBConfigureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBConfigure represents a Configure event raised by the USDB contract.
type USDBConfigure struct {
	Account   common.Address
	YieldMode uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfigure is a free log retrieval operation binding the contract event 0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36.
//
// Solidity: event Configure(address indexed account, uint8 yieldMode)
func (_USDB *USDBFilterer) FilterConfigure(opts *bind.FilterOpts, account []common.Address) (*USDBConfigureIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _USDB.contract.FilterLogs(opts, "Configure", accountRule)
	if err != nil {
		return nil, err
	}
	return &USDBConfigureIterator{contract: _USDB.contract, event: "Configure", logs: logs, sub: sub}, nil
}

// WatchConfigure is a free log subscription operation binding the contract event 0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36.
//
// Solidity: event Configure(address indexed account, uint8 yieldMode)
func (_USDB *USDBFilterer) WatchConfigure(opts *bind.WatchOpts, sink chan<- *USDBConfigure, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _USDB.contract.WatchLogs(opts, "Configure", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBConfigure)
				if err := _USDB.contract.UnpackLog(event, "Configure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigure is a log parse operation binding the contract event 0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36.
//
// Solidity: event Configure(address indexed account, uint8 yieldMode)
func (_USDB *USDBFilterer) ParseConfigure(log types.Log) (*USDBConfigure, error) {
	event := new(USDBConfigure)
	if err := _USDB.contract.UnpackLog(event, "Configure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// USDBInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the USDB contract.
type USDBInitializedIterator struct {
	Event *USDBInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBInitialized represents a Initialized event raised by the USDB contract.
type USDBInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_USDB *USDBFilterer) FilterInitialized(opts *bind.FilterOpts) (*USDBInitializedIterator, error) {

	logs, sub, err := _USDB.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &USDBInitializedIterator{contract: _USDB.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_USDB *USDBFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *USDBInitialized) (event.Subscription, error) {

	logs, sub, err := _USDB.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBInitialized)
				if err := _USDB.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_USDB *USDBFilterer) ParseInitialized(log types.Log) (*USDBInitialized, error) {
	event := new(USDBInitialized)
	if err := _USDB.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// USDBMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the USDB contract.
type USDBMintIterator struct {
	Event *USDBMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBMint represents a Mint event raised by the USDB contract.
type USDBMint struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed account, uint256 amount)
func (_USDB *USDBFilterer) FilterMint(opts *bind.FilterOpts, account []common.Address) (*USDBMintIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _USDB.contract.FilterLogs(opts, "Mint", accountRule)
	if err != nil {
		return nil, err
	}
	return &USDBMintIterator{contract: _USDB.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed account, uint256 amount)
func (_USDB *USDBFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *USDBMint, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _USDB.contract.WatchLogs(opts, "Mint", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBMint)
				if err := _USDB.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed account, uint256 amount)
func (_USDB *USDBFilterer) ParseMint(log types.Log) (*USDBMint, error) {
	event := new(USDBMint)
	if err := _USDB.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// USDBNewPriceIterator is returned from FilterNewPrice and is used to iterate over the raw logs and unpacked data for NewPrice events raised by the USDB contract.
type USDBNewPriceIterator struct {
	Event *USDBNewPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBNewPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBNewPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBNewPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBNewPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBNewPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBNewPrice represents a NewPrice event raised by the USDB contract.
type USDBNewPrice struct {
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNewPrice is a free log retrieval operation binding the contract event 0x270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b7.
//
// Solidity: event NewPrice(uint256 price)
func (_USDB *USDBFilterer) FilterNewPrice(opts *bind.FilterOpts) (*USDBNewPriceIterator, error) {

	logs, sub, err := _USDB.contract.FilterLogs(opts, "NewPrice")
	if err != nil {
		return nil, err
	}
	return &USDBNewPriceIterator{contract: _USDB.contract, event: "NewPrice", logs: logs, sub: sub}, nil
}

// WatchNewPrice is a free log subscription operation binding the contract event 0x270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b7.
//
// Solidity: event NewPrice(uint256 price)
func (_USDB *USDBFilterer) WatchNewPrice(opts *bind.WatchOpts, sink chan<- *USDBNewPrice) (event.Subscription, error) {

	logs, sub, err := _USDB.contract.WatchLogs(opts, "NewPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBNewPrice)
				if err := _USDB.contract.UnpackLog(event, "NewPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPrice is a log parse operation binding the contract event 0x270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b7.
//
// Solidity: event NewPrice(uint256 price)
func (_USDB *USDBFilterer) ParseNewPrice(log types.Log) (*USDBNewPrice, error) {
	event := new(USDBNewPrice)
	if err := _USDB.contract.UnpackLog(event, "NewPrice", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// USDBTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the USDB contract.
type USDBTransferIterator struct {
	Event *USDBTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *USDBTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(USDBTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(USDBTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *USDBTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *USDBTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// USDBTransfer represents a Transfer event raised by the USDB contract.
type USDBTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_USDB *USDBFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*USDBTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _USDB.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &USDBTransferIterator{contract: _USDB.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_USDB *USDBFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *USDBTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _USDB.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(USDBTransfer)
				if err := _USDB.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_USDB *USDBFilterer) ParseTransfer(log types.Log) (*USDBTransfer, error) {
	event := new(USDBTransfer)
	if err := _USDB.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
